//
// Created by sba on 20.07.21.
//

#ifndef DUAL_ALGEBRA_KINEMATICS_DUAL_SKEW_PRODUCT_H
#define DUAL_ALGEBRA_KINEMATICS_DUAL_SKEW_PRODUCT_H

#include "dual_skew.h"
#include "dual_number.h"
#include "screw.h"

/**
 * \brief A Product of a UnitLine and its transformation value
 *
 * The transformation value is seperated again from the screw as it is needed individually.
 * In some point this make the concept with screws already defining a transformation a bit useless
 *   but it is at least consistent
 */
class DualSkewProduct {
private:
    /**
     * \brief The dual skew defined by an UnitLine
     */
    DualSkew _skew;
    /**
     * \brief The transformation value
     *
     * Real-Part corresponds to a rotation.
     * Dual-Part corresponds to a translation.
     */
    DualNumberAlgebra::DualNumber _angle;
public:
    /**
     * \brief SkewProduct generation by a screw with its norm
     *
     * The screws norm - with respect to Screw::no_rotation() to guarantee zero real parts - will be used as angle
     *   and the skew itself will be generated by the aligned and normalized UnitLine.
     *
     * @param screw The transformation screw
     */
    DualSkewProduct(const Screw &screw) noexcept;

    /**
     * \brief SkewProduct by seperated UnitLine and transformation angle
     * @param screw The unit line for the transformation
     * @param argument The transformation angle
     */
    DualSkewProduct(const UnitLine &screw, const DualNumberAlgebra::DualNumber &argument) noexcept;

    /**
     * \brief Getter for the skew
     * @return The skew of the product
     */
    DualSkew skew() const noexcept;

    /**
     * \brief Getter for the angle
     * @return The angle of the product
     */
    DualNumberAlgebra::DualNumber angle() const noexcept;

    /**
     * \brief The "addition" is the group similar to the lie algebra and the lie bracket
     *
     * this does not work as it is.
     * it was actually just a try in the first place
     * \todo make it work
     * @param rhs right-hand-side
     * @return The sum of the products
     */
    DualSkewProduct operator+(const DualSkewProduct &rhs) const noexcept;

    /**
     * \brief Comparison between two product
     * @param lhs left-hand-side
     * @param rhs right-hand-side
     * @return True if equal
     */
    friend bool operator==(const DualSkewProduct &lhs, const DualSkewProduct &rhs) noexcept;
};

#endif //DUAL_ALGEBRA_KINEMATICS_DUAL_SKEW_PRODUCT_H
